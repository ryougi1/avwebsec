import sys
import hashlib
import math
import random
import binascii



def XOR(s1, s2):
    return hex(int(s1, 16) ^ int(s2, 16))[2:]


# x: nonnegative integer to be converted
# x_len: intended length of the resulting octet string
def I2OSP(x, x_len):
    if x >= 256**x_len:
        print("integer too large")
        sys.exit()
    else:
        result = [0] * x_len
        index = x_len - 1
        while index >= 0:
            if x < 256:
                result[index] = x
                break
            else:
                rest = x - int(x / 256) * 256
                x /= 256
                result[index] = rest
                index -= 1

        else:
            print("index = -1")
    return ''.join(format(x, '02x') for x in result)


def MGF1(mgf_seed, mask_len):
    h_len = 20 # Hash length for SHA1
    if mask_len > 2**32 * h_len:
        print("mask too long")
        sys.exit()
    else:
        T = ''
        for i in range(0, math.ceil(mask_len / h_len)): # SHOULD -1
            C = I2OSP(i, 4)
            T += hashlib.sha1(bytearray.fromhex(mgf_seed + C)).hexdigest()

    return T[:mask_len*2]


def OAEP_ENCRYPT(M, seed):
    k = 128 # bytes
    h_len = 20 # bytes
    if len(M) > k - 2 * h_len - 2:
        print("message too long")
        sys.exit()
    else:
        l_hash = hashlib.sha1(bytearray.fromhex("")).hexdigest()
        PS = "00" * (k - int(len(M) / 2) - 2 * h_len - 2)
        DB = l_hash + PS + "01" + M
        random_string = '%040x' % random.randrange(16**40)

        db_mask = MGF1(seed, k - h_len - 1)
        masked_db = XOR(DB, db_mask)
        seed_mask = MGF1(masked_db, h_len)
        masked_seed = XOR(seed, seed_mask)

        EM = "00" + masked_seed + masked_db

        return EM


def OAEP_DECRYPT(EM):
    k = 128
    h_len = 20
    l_hash = hashlib.sha1(bytearray.fromhex("")).hexdigest()

    Y = EM[:2]
    EM = EM[2:]
    masked_seed = EM[:h_len * 2]
    masked_db = EM[h_len * 2:]

    seed_mask = MGF1(masked_db, h_len)
    seed = XOR(masked_seed, seed_mask)
    db_mask = MGF1(seed, k - h_len - 1)
    DB = XOR(masked_db, db_mask)


    M = DB[h_len * 2 + DB[h_len * 2 :].find("01") + 2 :]

    return M


mgfSeed = "4ca586d5705a0b82ce5c5ca03dcd90"
maskLen = "25"

M = "f56bb84aff6f2240e8da52fb34f9f48ffd3e891c75df2abac46d29ab3a"
seed = "2142138dc59ad2367e5091d72d84046f99547e32"

EM = "00cbbfadbb0b9e0d96f094a3d6e552b4d82db3e4f4f9d3778a18b7aa067f90b2178406fa1e1bf77f03f86629dd5607d11b9961707736c2d16e7c668b367890bc6ef1745396404ba7832b1cdfb0388ef601947fc0aff1fd2dcd279dabdfcd92a7a13808d96ceea0a999a9947874a4741e7530bd99046c3368c6485702ea93ad95"

print("\nMGF1:", MGF1(mgfSeed, int(maskLen)))
print("\nOAEP_ENCODE:", OAEP_ENCRYPT(M, seed))
print("\nOAEP_DECODE:", OAEP_DECRYPT(EM))
